#ifdef FSHIGHPRECISION
precision highp float;
#else
precision mediump float;
#endif

#include?DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT "LightHelper.glsl";

uniform vec4 u_Albedo;

#ifdef ALPHATEST
uniform float u_AlphaTestValue;
#endif

#ifdef DIFFUSEMAP
uniform sampler2D u_DiffuseTexture;
#endif

#ifdef REFLECTMAP
uniform samplerCube u_ReflectTexture;
uniform vec3 u_MaterialReflect;
#endif

#ifdef DIFFUSEMAP||((DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT)&&(COLOR&&SPECULARMAP||NORMALMAP))
varying vec2 v_Texcoord0;
#endif

#ifdef AMBIENTMAP
varying vec2 v_Texcoord1;
uniform sampler2D u_AmbientTexture;
#endif

#ifdef COLOR
varying vec4 v_Color;
#endif

#ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT
uniform vec3 u_MaterialDiffuse;
uniform vec4 u_MaterialSpecular;
  #ifdef (DIFFUSEMAP||COLOR)&&SPECULARMAP 
  uniform sampler2D u_SpecularTexture;
  #endif
#endif

#ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||AMBIENTMAP
uniform vec3 u_MaterialAmbient;
#endif

#ifdef FOG
uniform float u_FogStart;
uniform float u_FogRange;
uniform vec3 u_FogColor;
#endif

#ifdef MIXUV
uniform float  u_UVAniAge;
#endif


#ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||REFLECTMAP
varying vec3 v_Normal;
#endif

#ifdef (DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT)&&NORMALMAP
uniform sampler2D u_NormalTexture;
varying vec3 v_Tangent0;
#endif

#ifdef DIRECTIONLIGHT
uniform DirectionLight u_DirectionLight;
#endif

#ifdef POINTLIGHT
uniform PointLight u_PointLight;
#endif

#ifdef SPOTLIGHT
uniform SpotLight u_SpotLight;
#endif


#ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||FOG||REFLECTMAP
uniform vec3 u_CameraPos;
varying vec3 v_PositionWorld;
#endif


void main()
{
  #ifdef DIFFUSEMAP&&!COLOR
  gl_FragColor=texture2D(u_DiffuseTexture, v_Texcoord0);
  #endif 
  
  #ifdef COLOR&&!DIFFUSEMAP
  gl_FragColor=v_Color;
  #endif 
  
  #ifdef DIFFUSEMAP&&COLOR
  vec4 texColor=texture2D(u_DiffuseTexture, v_Texcoord0);
  gl_FragColor=texColor*v_Color;
  #endif
  
  #ifdef !DIFFUSEMAP&&!COLOR
  gl_FragColor=vec4(1.0,1.0,1.0,1.0);
  #endif 
  
  #ifdef AMBIENTMAP
  gl_FragColor.rgb=gl_FragColor.rgb*(u_MaterialAmbient+texture2D(u_AmbientTexture, v_Texcoord1).rgb);
  #endif 
  
  gl_FragColor=gl_FragColor*u_Albedo;
  
  #ifdef ALPHATEST
  if(gl_FragColor.a-u_AlphaTestValue<0.0)
    discard;
  #endif
  
  
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||REFLECTMAP
  vec3 normal;
    #ifdef (DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT)&&NORMALMAP
    vec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;
	normal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent0));
	#else
	normal = normalize(v_Normal);
    #endif
  #endif
	
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT
  vec3 diffuse = vec3(0.0);
  vec3 ambient = vec3(0.0);
  vec3 specular= vec3(0.0);
  vec3 dif, amb, spe;
  #endif
  
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||FOG||REFLECTMAP
  vec3 toEye;
    #ifdef FOG
	toEye=u_CameraPos-v_PositionWorld;
    float toEyeLength=length(toEye);
    toEye/=toEyeLength;
    #else
	toEye=normalize(u_CameraPos-v_PositionWorld);
    #endif
  #endif
	
  #ifdef DIRECTIONLIGHT
  computeDirectionLight(u_MaterialDiffuse,u_MaterialAmbient,u_MaterialSpecular,u_DirectionLight,normal,toEye, dif, amb, spe);
  diffuse+=dif;
  ambient+=amb;
  specular+=spe;
  #endif
 
  #ifdef POINTLIGHT
  computePointLight(u_MaterialDiffuse,u_MaterialAmbient,u_MaterialSpecular,u_PointLight,v_PositionWorld,normal,toEye, dif, amb, spe);
  diffuse+=dif;
  ambient+=amb;
  specular+=spe;
  #endif

  #ifdef SPOTLIGHT
  ComputeSpotLight(u_MaterialDiffuse,u_MaterialAmbient,u_MaterialSpecular,u_SpotLight,v_PositionWorld,normal,toEye, dif, amb, spe);
  diffuse+=dif;
  ambient+=amb;
  specular+=spe;
  #endif
  

  
  
  
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT
    #ifdef (DIFFUSEMAP||COLOR)&&SPECULARMAP
    specular =specular*texture2D(u_SpecularTexture, v_Texcoord0).rgb;
    #endif
  gl_FragColor =vec4( gl_FragColor.rgb*(ambient + diffuse) + specular,gl_FragColor.a);
  #endif
  
  #ifdef REFLECTMAP
  vec3 incident = -toEye;
  vec3 reflectionVector = reflect(incident,normal);
  vec3 reflectionColor  = textureCube(u_ReflectTexture,reflectionVector).rgb;
  gl_FragColor.rgb += u_MaterialReflect*reflectionColor;
  #endif
  
  #ifdef FOG
  float lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);
  gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);
  #endif
}

